// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bot_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BotClient is the client API for Bot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotClient interface {
	GetLastBlockNum(ctx context.Context, in *PaymentSystemRequest, opts ...grpc.CallOption) (*BlockNum, error)
	GetTotalBalance(ctx context.Context, in *AccountTypeRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetAsset20TotalBalance(ctx context.Context, in *Asset20AccountTypeRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetAddress(ctx context.Context, in *AccountAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	CheckAddressFormat(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*Error, error)
	GetAccountBalance(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetAsset20AccountBalance(ctx context.Context, in *Asset20AccountRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetIncomeTransaction(ctx context.Context, in *IncomeTransactionRequest, opts ...grpc.CallOption) (*IncomeTransactionResponse, error)
	GetAsset20IncomeTransaction(ctx context.Context, in *Asset20IncomeTransactionRequest, opts ...grpc.CallOption) (*IncomeTransactionResponse, error)
	GetIncomeTransactions(ctx context.Context, in *IncomeTransactionsRequest, opts ...grpc.CallOption) (*IncomeTransactionResponse, error)
	GetAsset20IncomeTransactions(ctx context.Context, in *Asset20IncomeTransactionsRequest, opts ...grpc.CallOption) (*IncomeTransactionResponse, error)
}

type botClient struct {
	cc grpc.ClientConnInterface
}

func NewBotClient(cc grpc.ClientConnInterface) BotClient {
	return &botClient{cc}
}

func (c *botClient) GetLastBlockNum(ctx context.Context, in *PaymentSystemRequest, opts ...grpc.CallOption) (*BlockNum, error) {
	out := new(BlockNum)
	err := c.cc.Invoke(ctx, "/logmesh.bot.v1.Bot/GetLastBlockNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetTotalBalance(ctx context.Context, in *AccountTypeRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/logmesh.bot.v1.Bot/GetTotalBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetAsset20TotalBalance(ctx context.Context, in *Asset20AccountTypeRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/logmesh.bot.v1.Bot/GetAsset20TotalBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetAddress(ctx context.Context, in *AccountAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, "/logmesh.bot.v1.Bot/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) CheckAddressFormat(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/logmesh.bot.v1.Bot/CheckAddressFormat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetAccountBalance(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/logmesh.bot.v1.Bot/GetAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetAsset20AccountBalance(ctx context.Context, in *Asset20AccountRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/logmesh.bot.v1.Bot/GetAsset20AccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetIncomeTransaction(ctx context.Context, in *IncomeTransactionRequest, opts ...grpc.CallOption) (*IncomeTransactionResponse, error) {
	out := new(IncomeTransactionResponse)
	err := c.cc.Invoke(ctx, "/logmesh.bot.v1.Bot/GetIncomeTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetAsset20IncomeTransaction(ctx context.Context, in *Asset20IncomeTransactionRequest, opts ...grpc.CallOption) (*IncomeTransactionResponse, error) {
	out := new(IncomeTransactionResponse)
	err := c.cc.Invoke(ctx, "/logmesh.bot.v1.Bot/GetAsset20IncomeTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetIncomeTransactions(ctx context.Context, in *IncomeTransactionsRequest, opts ...grpc.CallOption) (*IncomeTransactionResponse, error) {
	out := new(IncomeTransactionResponse)
	err := c.cc.Invoke(ctx, "/logmesh.bot.v1.Bot/GetIncomeTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) GetAsset20IncomeTransactions(ctx context.Context, in *Asset20IncomeTransactionsRequest, opts ...grpc.CallOption) (*IncomeTransactionResponse, error) {
	out := new(IncomeTransactionResponse)
	err := c.cc.Invoke(ctx, "/logmesh.bot.v1.Bot/GetAsset20IncomeTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotServer is the server API for Bot service.
// All implementations must embed UnimplementedBotServer
// for forward compatibility
type BotServer interface {
	GetLastBlockNum(context.Context, *PaymentSystemRequest) (*BlockNum, error)
	GetTotalBalance(context.Context, *AccountTypeRequest) (*BalanceResponse, error)
	GetAsset20TotalBalance(context.Context, *Asset20AccountTypeRequest) (*BalanceResponse, error)
	GetAddress(context.Context, *AccountAddressRequest) (*AddressResponse, error)
	CheckAddressFormat(context.Context, *AddressRequest) (*Error, error)
	GetAccountBalance(context.Context, *AccountRequest) (*BalanceResponse, error)
	GetAsset20AccountBalance(context.Context, *Asset20AccountRequest) (*BalanceResponse, error)
	GetIncomeTransaction(context.Context, *IncomeTransactionRequest) (*IncomeTransactionResponse, error)
	GetAsset20IncomeTransaction(context.Context, *Asset20IncomeTransactionRequest) (*IncomeTransactionResponse, error)
	GetIncomeTransactions(context.Context, *IncomeTransactionsRequest) (*IncomeTransactionResponse, error)
	GetAsset20IncomeTransactions(context.Context, *Asset20IncomeTransactionsRequest) (*IncomeTransactionResponse, error)
	mustEmbedUnimplementedBotServer()
}

// UnimplementedBotServer must be embedded to have forward compatible implementations.
type UnimplementedBotServer struct {
}

func (UnimplementedBotServer) GetLastBlockNum(context.Context, *PaymentSystemRequest) (*BlockNum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastBlockNum not implemented")
}
func (UnimplementedBotServer) GetTotalBalance(context.Context, *AccountTypeRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalBalance not implemented")
}
func (UnimplementedBotServer) GetAsset20TotalBalance(context.Context, *Asset20AccountTypeRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset20TotalBalance not implemented")
}
func (UnimplementedBotServer) GetAddress(context.Context, *AccountAddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedBotServer) CheckAddressFormat(context.Context, *AddressRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAddressFormat not implemented")
}
func (UnimplementedBotServer) GetAccountBalance(context.Context, *AccountRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedBotServer) GetAsset20AccountBalance(context.Context, *Asset20AccountRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset20AccountBalance not implemented")
}
func (UnimplementedBotServer) GetIncomeTransaction(context.Context, *IncomeTransactionRequest) (*IncomeTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeTransaction not implemented")
}
func (UnimplementedBotServer) GetAsset20IncomeTransaction(context.Context, *Asset20IncomeTransactionRequest) (*IncomeTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset20IncomeTransaction not implemented")
}
func (UnimplementedBotServer) GetIncomeTransactions(context.Context, *IncomeTransactionsRequest) (*IncomeTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeTransactions not implemented")
}
func (UnimplementedBotServer) GetAsset20IncomeTransactions(context.Context, *Asset20IncomeTransactionsRequest) (*IncomeTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset20IncomeTransactions not implemented")
}
func (UnimplementedBotServer) mustEmbedUnimplementedBotServer() {}

// UnsafeBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotServer will
// result in compilation errors.
type UnsafeBotServer interface {
	mustEmbedUnimplementedBotServer()
}

func RegisterBotServer(s grpc.ServiceRegistrar, srv BotServer) {
	s.RegisterService(&Bot_ServiceDesc, srv)
}

func _Bot_GetLastBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetLastBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logmesh.bot.v1.Bot/GetLastBlockNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetLastBlockNum(ctx, req.(*PaymentSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetTotalBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetTotalBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logmesh.bot.v1.Bot/GetTotalBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetTotalBalance(ctx, req.(*AccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetAsset20TotalBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Asset20AccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetAsset20TotalBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logmesh.bot.v1.Bot/GetAsset20TotalBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetAsset20TotalBalance(ctx, req.(*Asset20AccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logmesh.bot.v1.Bot/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetAddress(ctx, req.(*AccountAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_CheckAddressFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).CheckAddressFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logmesh.bot.v1.Bot/CheckAddressFormat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).CheckAddressFormat(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logmesh.bot.v1.Bot/GetAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetAccountBalance(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetAsset20AccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Asset20AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetAsset20AccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logmesh.bot.v1.Bot/GetAsset20AccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetAsset20AccountBalance(ctx, req.(*Asset20AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetIncomeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetIncomeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logmesh.bot.v1.Bot/GetIncomeTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetIncomeTransaction(ctx, req.(*IncomeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetAsset20IncomeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Asset20IncomeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetAsset20IncomeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logmesh.bot.v1.Bot/GetAsset20IncomeTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetAsset20IncomeTransaction(ctx, req.(*Asset20IncomeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetIncomeTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomeTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetIncomeTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logmesh.bot.v1.Bot/GetIncomeTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetIncomeTransactions(ctx, req.(*IncomeTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_GetAsset20IncomeTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Asset20IncomeTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).GetAsset20IncomeTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logmesh.bot.v1.Bot/GetAsset20IncomeTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).GetAsset20IncomeTransactions(ctx, req.(*Asset20IncomeTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bot_ServiceDesc is the grpc.ServiceDesc for Bot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logmesh.bot.v1.Bot",
	HandlerType: (*BotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastBlockNum",
			Handler:    _Bot_GetLastBlockNum_Handler,
		},
		{
			MethodName: "GetTotalBalance",
			Handler:    _Bot_GetTotalBalance_Handler,
		},
		{
			MethodName: "GetAsset20TotalBalance",
			Handler:    _Bot_GetAsset20TotalBalance_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _Bot_GetAddress_Handler,
		},
		{
			MethodName: "CheckAddressFormat",
			Handler:    _Bot_CheckAddressFormat_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _Bot_GetAccountBalance_Handler,
		},
		{
			MethodName: "GetAsset20AccountBalance",
			Handler:    _Bot_GetAsset20AccountBalance_Handler,
		},
		{
			MethodName: "GetIncomeTransaction",
			Handler:    _Bot_GetIncomeTransaction_Handler,
		},
		{
			MethodName: "GetAsset20IncomeTransaction",
			Handler:    _Bot_GetAsset20IncomeTransaction_Handler,
		},
		{
			MethodName: "GetIncomeTransactions",
			Handler:    _Bot_GetIncomeTransactions_Handler,
		},
		{
			MethodName: "GetAsset20IncomeTransactions",
			Handler:    _Bot_GetAsset20IncomeTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bot.proto",
}
